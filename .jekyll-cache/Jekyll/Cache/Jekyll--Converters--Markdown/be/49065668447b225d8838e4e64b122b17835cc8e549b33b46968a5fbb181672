I"’%<p>This tutorial will go through the process of setting up a two column layout using floats and divs. This tutorial will use your main <strong>index.html</strong> file and its associated CSS file to work with.</p>

<h3 id="step-1-open-your-repository-and-files"><span id="step1">Step 1: Open Your Repository and Files</span></h3>
<p>Open your repository in Atom and then open up your main <strong>index.html</strong> file and CSS file associated with it by double clicking on the files in the tree view.</p>

<p>Once both are open you can view them side by side by dragging the the tab with your CSS file to the right until the right column is highlighted. Once it is highlighted you can let go and you should be able to see both files as a split screen in Atom. If you don‚Äôt want to work this way that‚Äôs okay.</p>

<p><img src="/assets/img/4p1/step1.png" alt="two column view in Atom" title="Step 1" /></p>

<p>The HTML file in the screenshot should closely resemble your HTML file but the CSS file might look different than yours which is okay. If you want to see the actual code for these you can look at them on Github ‚Äì¬†<a href="https://github.com/mmcdermott18/su2020-avt217/blob/gh-pages/index.html">HTML file</a>, <a href="https://github.com/mmcdermott18/su2020-avt217/blob/gh-pages/css/main.css">CSS file</a>.</p>

<h3 id="step-2-section-off-html-file"><span id="step2">Step 2: Section off HTML file</span></h3>
<p>We are going to work in the HTML file first and get all of our content structured in a way that will be easy to modify with CSS later. The goal of this step is to wrap content in the HTML file in semantic elements (<code class="highlighter-rouge">header</code>, <code class="highlighter-rouge">main</code>, <code class="highlighter-rouge">footer</code>, etc.) or <code class="highlighter-rouge">div</code> elements. So let‚Äôs start with the semantic elements by adding a <code class="highlighter-rouge">header</code> element and a <code class="highlighter-rouge">main</code> element to the page.</p>

<h4 id="step-2a-adding-a-header-element">Step 2a: Adding a Header Element</h4>

<p>The <code class="highlighter-rouge">header</code> element should contain content that would go in a header. The main heading on this page seems like good content to go there. Wrap the <code class="highlighter-rouge">h1</code> element in a <code class="highlighter-rouge">header</code> element. This means adding an opening tag for the <code class="highlighter-rouge">header</code> on a new line above the <code class="highlighter-rouge">h1</code> element, indenting the <code class="highlighter-rouge">h1</code> element on level because now it is a child of the <code class="highlighter-rouge">header</code> element, and then adding the closing tag for the <code class="highlighter-rouge">header</code> on a new line below the <code class="highlighter-rouge">h1</code> element. Should look something like the below.</p>

<p><img src="/assets/img/4p1/step2a.png" alt="adding header element to html file" title="Step 2a" /></p>

<h4 id="step-2b-adding-a-main-element">Step 2b: Adding a Main Element</h4>

<p>Next we want to do a similar process with the other content on the page (which in this example is the <code class="highlighter-rouge">ul</code> and all the content it contains). This time though instead of the <code class="highlighter-rouge">header</code> element we want to use the <code class="highlighter-rouge">main</code> element. The <code class="highlighter-rouge">main</code> element represents the dominant content of the <code class="highlighter-rouge">body</code> element, which in this case is the list of links.</p>

<p>So now wrap the rest of the content in your body in the <code class="highlighter-rouge">main</code> element. Make sure you have an opening tag before all the content you want to contain, a closing tag after all the content, and that the content inside the <code class="highlighter-rouge">main</code> element is indented appropriately.</p>

<p><img src="/assets/img/4p1/step2b.png" alt="adding main element to html file" title="Step 2b" /></p>

<h4 id="step-2c-splitting-the-list">Step 2c: Splitting the List</h4>

<p>Next we want to split the unordered list into two unordered lists. We want to do this because one column of this page is going to be exercise links and the other column is going to be project links.</p>

<p>The unordered list should be split up with a list for exercises and a list for the project. To do that just go to where the last exercise is and close the <code class="highlighter-rouge">ul</code> after it and then open another one after that. This is lines 23 and 24 in the screenshot below.</p>

<p><img src="/assets/img/4p1/step2c.png" alt="splitting the list into two lists" title="Step 2c" /></p>

<h4 id="step-2d-adding-two-div-elements">Step 2d: Adding Two Div Elements</h4>

<p>Finally we want to wrap each list in its own <code class="highlighter-rouge">div</code> element so we can add styles to make two columns instead of the single column right now.</p>

<p>Before each <code class="highlighter-rouge">ul</code> add an opening <code class="highlighter-rouge">div</code> tag and after each <code class="highlighter-rouge">ul</code> add a closing div tag. Don‚Äôt forget to indent contained elements one level each.</p>

<p><img src="/assets/img/4p1/step2d1.png" alt="wrapping each list in a div element" title="Step 2d" /></p>

<p>The last step here is adding a class to the <code class="highlighter-rouge">div</code> elements. Since these are two equal columns and they are probably going to have the same styles we can give them both the same class name. It could be whatever you want but I‚Äôm going to use ‚Äúcol‚Äù to keep it short and informative.</p>

<p><img src="/assets/img/4p1/step2d2.png" alt="giving the div elements the col class" title="Step 2d" /></p>

<p>Now you should have a nicely sectioned and formatted file that has a <code class="highlighter-rouge">header</code>, <code class="highlighter-rouge">main</code>, 2 <code class="highlighter-rouge">ul</code>‚Äôs, and 2 <code class="highlighter-rouge">div</code>‚Äôs each with the ‚Äúcol‚Äù class. I‚Äôm also going to add two heading elements in each column to note what the list below is of. Not something you have to do but helpful for someone who might be unfamiliar with the site.</p>

<p><img src="/assets/img/4p1/step2d3.png" alt="adding h2 elements above each list" title="Step 2d" /></p>

<p>Now if you save it and preview the file you will see that nothing really changed but there should now be two separate lists.</p>

<p><img src="/assets/img/4p1/step2d4.png" alt="preview of page in browser" title="Step 2d" /></p>

<h3 id="step-3-adding-styles"><span id="step3">Step 3: Adding Styles</span></h3>

<p>The page is structured how it needs to be in order to allow for two columns to work but we still need to add the CSS rules that make the site display like we want. The wireframe below illustrates the layout we are going for. The <code class="highlighter-rouge">header</code> is the blue box with the <code class="highlighter-rouge">h1</code> type in there. The <code class="highlighter-rouge">main</code> is the yellow box with the two red <code class="highlighter-rouge">div</code>‚Äôs in there each containing one of the lists. We don‚Äôt want them stretching across the page so we are going to give them some widths to make the content narrower and add some margins to make that width center on the page.</p>

<p><img src="/assets/img/4p1/step3.png" alt="wireframe of what the site should look like" title="Step 3" /></p>

<h4 id="step-3a-header-styles">Step 3a: Header Styles</h4>

<p>Let‚Äôs start at the top with getting the <code class="highlighter-rouge">header</code> element into its place. I added some comments to my CSS file to note where my general, layout, type, and link styles are to help keep me organized. The styles we are getting ready to add are going to go under my layout styles comment.</p>

<p>The first thing we want to do when we want to style something is write the correct selector. In this case I want to style the <code class="highlighter-rouge">header</code> element so I‚Äôll use an element selector and type <code class="highlighter-rouge">header { }</code> on a new line. In between those two curly brackets I‚Äôm going to add an empty line so the final result will look like the screenshot below.</p>

<p><img src="/assets/img/4p1/step3a1.png" alt="header style rule set up" title="Step 3a" /></p>

<p>Now that I have the basic syntax there I‚Äôm going to start writing some declarations. I know I want to change the width and make sure it is centered on the page so I‚Äôm going to add the <code class="highlighter-rouge">width</code> property and the <code class="highlighter-rouge">margin</code> property. I‚Äôm also going to add a <code class="highlighter-rouge">background-color</code> to this so we can see what is happening but later I‚Äôll remove that. The value for the width is up to you. I‚Äôm going to start with <code class="highlighter-rouge">75vw</code> (vw stands for viewport widths so 75vw equals 75% of the width of the window) for the <code class="highlighter-rouge">width</code> and add a blue background color to keep true to the wireframe. For the margins I want the top and bottom to be 25px and I want it to be centered on the page and I want to write this all as one declaration. There is an easy way to get the element to center on the page once I have given it a width. Do you remember what it is? If you do try and write the margin declaration and once you do highlight this to check your answer <span class="spoiler">margin: 25px auto</span>.</p>
:ET